{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>\ud83d\udc4bGreetings! This EJS User Documentation aims to provide you with a concise yet informative introduction to EJS and its advantages when it comes to creating dynamic web applications. Whether you are just starting out, rest assured that this documentation will assist you in gaining a better understanding of EJS.</p> <p>What is EJS?</p> <p>EJS, which stands for Embedded JavaScript, is a powerful tool that allows developers to generate HTML markup for web pages. With EJS, you can create reusable and dynamic content that can be easily rendered on your web applications. This guide is specifically designed for beginners who are interested in learning about EJS and its capabilities for building dynamic web applications.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is targeted toward the following users:</p> <ul> <li> <p>Beginner developers who are new to EJS and want to learn how to use it to build dynamic web applications.</p> </li> <li> <p>Experienced developers who are already familiar with EJS but want to refresh their knowledge or learn new techniques.</p> </li> <li> <p>Anyone who is interested in web development and wants to learn more about the benefits and capabilities of EJS as a templating language.</p> </li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This documentation assumes the following:</p> <ul> <li> <p>Basic knowledge of HTML and CSS: EJS is a templating language that creates HTML markup. Knowing HTML and CSS can be useful when using EJS.</p> </li> <li> <p>Basic knowledge of JavaScript: EJS uses JavaScript syntax to generate dynamic content. Understanding JavaScript concepts such as variables, functions, and loops can be beneficial.</p> </li> <li> <p>Some familiarity with web development concepts: It's helpful to have a basic understanding of web development concepts such as server-side programming, HTTP requests, and rendering HTML pages.</p> </li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"Note <p>Please click on the name of the software to go to the official download website!</p> <ul> <li> <p>Node.js: EJS runs on Node.js (JavaScript runtime environment).</p> </li> <li> <p>Visual Studio Code : This is required to create and edit your EJS files. This documentation is using \"Visual Studio Code\". However, you can choose other code editor such as Sublime Text, and Atom.</p> </li> <li> <p>EJS module</p> <p>This documentation will guide you through the installation process of EJS.</p> </li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<ul> <li> <p>Installing EJS Guide</p> <p>This section guides you through the process of installing EJS on your local machine. The steps include checking for prerequisites such as having Node.js installed and creating a package.json file using the npm init command. Then, you will be instructed to run the command 'npm install ejs --save' in the project directory using the terminal.</p> </li> <li> <p>Creating EJS templates</p> <p>This task explains how to create EJS templates and embed dynamic content within them. The process involves creating a new file with the .ejs extension in the views directory, adding basic HTML markup, using &lt;%= %&gt; tags to embed EJS code in the HTML markup, and passing dynamic data from the server to the EJS template using the res.render() method.</p> </li> <li>Conditional statements in EJS templates <p>This task explains how to use conditional statements in EJS templates to display different content based on conditions. It covers the syntax for creating if statements, else statements, and else-if statements using various tags.</p> </li> </ul> Creator <p>The following user documentation is created by : </p> <p>Selina Se In Park (neulmisscj@gmail.com), Brian Xu (mattx0121@gmail.com)</p> <p>The document uses syntax highlighting to distinguish code from text and uses headings to organize different sections.</p>"},{"location":"Glossary/","title":"Glossary","text":"<ul> <li> <p>HTML (Hypertext Markup Language)</p> <p>Markup language used to create the structure and content of web pages.</p> </li> <li> <p>CSS (Cascading Style Sheets)</p> <p>A stylesheet language used to add style and formatting to HTML documents.</p> </li> <li> <p>JavaScript</p> <p>A programming language used to add interactivity and dynamic behavior to web pages.</p> </li> <li> <p>Node.js</p> <p>An open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a web browser.</p> </li> <li> <p>Express</p> <p>A popular Node.js web application framework used for building web applications and APIs.</p> </li> <li> <p>EJS (Embedded JavaScript)</p> <p>A templating language that allows you to generate HTML markup with JavaScript.</p> </li> <li> <p>Template</p> <p>A pre-designed file or layout that serves as a starting point for creating web pages or documents.</p> </li> <li> <p>Variable</p> <p>A container that holds a value, such as a number or string, that can be accessed and manipulated throughout a program.</p> </li> <li> <p>Function</p> <p>A block of code that performs a specific task and can be called or executed from other parts of the program.</p> </li> <li> <p>Control flow</p> <p>The order in which statements and instructions are executed in a program.</p> </li> <li> <p>Conditional statement</p> <p>A programming construct that executes different code based on whether a certain condition is true or false.</p> </li> <li> <p>If statement</p> <p>A type of conditional statement that executes code if a specified condition is true.</p> </li> <li> <p>Else statement</p> <p>A type of conditional statement that executes code if the specified condition in an if statement is false.</p> </li> <li> <p>Else-if statement</p> <p>A type of conditional statement that checks multiple conditions and executes different code depending on which condition is true.</p> </li> <li> <p>Dynamic content</p> <p>Content that changes based on the state of an application or user input.</p> </li> <li> <p>Placeholder</p> <p>A code snippet that is used to represent dynamic data in a template file. In EJS, placeholders are written using &lt;% %&gt; syntax.</p> </li> <li> <p>Partials</p> <p>A reusable component of a web page that can be included in multiple pages. In EJS, partials are defined using &lt;% include %&gt; syntax.</p> </li> </ul>"},{"location":"Troubleshoot-guide/","title":"Troubleshooting Guide","text":"<p>A Troubleshooting Guide can help users overcome common issues and avoid frustration while learning EJS. Here are some of the most common issues that users might encounter when working with EJS, along with their solutions:</p> <ul> <li>Issue: The EJS template is not rendering properly.</li> </ul> Solution <p>If your EJS template is not rendering correctly, make sure that you have installed EJS and are using it correctly in your code. Check for syntax errors in your template file, and make sure that your data is being passed correctly. You can also try clearing your cache and restarting your server.</p> <ul> <li>Issue: EJS tags are not being evaluated in the template.</li> </ul> Solution <p>If your EJS tags are not being evaluated, make sure that you are using the correct syntax for EJS tags. Use &lt;% %&gt; for control flow and &lt;%= %&gt; for output. Also, check that the EJS tags are not being commented out or enclosed within HTML tags.</p> <ul> <li>Issue: The EJS template is not displaying data correctly.</li> </ul> Solution <p>If your EJS template is not displaying data correctly, there could be a few reasons for this. Check that your data is being passed correctly and that your EJS tags are properly referencing your data. Make sure that your data is not undefined, null, or an empty string.</p> <ul> <li>Issue: EJS is throwing a syntax error.</li> </ul> Solution <p>If EJS is throwing a syntax error, check your EJS tags for syntax errors, such as unclosed or mismatched tags. If you're using a code editor, enable EJS syntax highlighting to catch errors early. Also, make sure that you're using the correct version of EJS that matches your code.</p> <ul> <li>Issue: EJS is not installed properly.</li> </ul> Solution <p>If EJS is not installed properly, you can use the npm install ejs --save command to reinstall EJS. If you're encountering permissions errors, try using sudo npm install ejs --save or running your command prompt as an administrator. You can also check that EJS is listed in your package.json file and that it's included in your project dependencies.</p> <ul> <li>Issue: EJS is not rendering the correct data types.</li> </ul> Solution <p>Make sure that you are passing the correct data type to your EJS template. EJS is capable of rendering strings, numbers, booleans, arrays, and objects. If your data type is incorrect, EJS may not render it correctly.</p> <ul> <li>Issue: EJS is rendering the wrong data.</li> </ul> Solution <p>Check that you are passing the correct data to your EJS template. Make sure that you are referencing the correct data when using EJS tags. Also, check that you are not overwriting your data somewhere in your code.</p> <ul> <li>Issue: EJS is not rendering HTML tags properly.</li> </ul> Solution <p>Make sure that you are using the correct syntax for rendering HTML tags in EJS (&lt;%- %&gt; instead of &lt;%= %&gt;). If your HTML tags are not rendering properly, check that your data does not contain any HTML characters that may be causing issues.</p> <ul> <li>Issue: EJS is not rendering the correct template file.</li> </ul> Solution <p>Double-check that you are calling the correct EJS template file in your code. Make sure that the file path is correct and that the file extension is .ejs.</p> <ul> <li>Issue: EJS is rendering the same data for all pages.</li> </ul> Solution <p>Check that you are passing the correct data to each EJS template. If you are using a layout file, make sure that your data is not being overwritten by the layout file. You can also try passing the data explicitly to each template instead of relying on a layout file.</p> <ul> <li>Issue: EJS is not displaying images or other external resources.</li> </ul> Solution <p>Check that the file paths for your external resources are correct. Make sure that the resources are accessible from the location of your EJS template file. You may also need to set the correct MIME type for your external resources if they are not being rendered properly.</p> <ul> <li>Issue: EJS is rendering slowly or causing performance issues.</li> </ul> Solution <p>Check that you are not rendering too much data in your EJS templates. Large data sets can cause EJS to render slowly. You can also try pre-compiling your EJS templates to improve performance. Finally, consider using a caching mechanism to reduce the number of times your EJS templates are rendered.</p>"},{"location":"Troubleshoot-guide/#by-addressing-these-common-issues-you-can-ensure-that-your-ejs-templates-work-as-expected-and-that-your-development-process-is-smooth-and-efficient","title":"By addressing these common issues, you can ensure that your EJS templates work as expected and that your development process is smooth and efficient.","text":""},{"location":"task1/","title":"EJS Installation","text":""},{"location":"task1/#overview","title":"Overview","text":"<p>In this section, we will guide beginners through the installation process of EJS. We will provide step-by-step instructions on how to install the necessary software and modules to get started with EJS. We will also explain the prerequisites for using EJS and provide helpful tips to ensure a smooth installation process.</p> <p>By the end of this section, beginners will have a solid understanding of the software requirements for using EJS and will be able to successfully install EJS and its dependencies. Whether you are a web development novice or an experienced developer new to EJS, this section will provide a comprehensive guide to get you up and running with EJS quickly and easily.</p>"},{"location":"task1/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Download Node.js.</p> </li> <li> <p>Download VS Code.</p> </li> </ul>"},{"location":"task1/#installation-steps-for-ejs","title":"Installation Steps for EJS","text":"<p>Follow these steps to install EJS. At this point, you should have Node.js and VS Code installed on your local computer.</p> <ol> <li>Create a new project directory.<ol> <li>Open your terminal or command prompt.</li> <li>Move to your desktop!    <pre><code>cd Desktop\n</code></pre></li> <li>Create a new directory for your project by entering the following command:    <pre><code>mkdir my-ejs-project\n</code></pre></li> </ol> </li> <li>In your same terminal, navigate to the project directory.<ol> <li>Navigate to the project directory by entering the following command in the terminal.    <pre><code>cd my-ejs-project\n</code></pre></li> </ol> </li> <li> <p>Initialize a new Node.js project.</p> <ol> <li>In the terminal, run the following command to open your project directory in \"Visual Studio Code\"    <pre><code>code .\n</code></pre></li> <li>Once the \"Visual Studio Code\" is opened, open the console by pressing ctrl+J (Windows) or BRIAN HERE (Mac) to open the console.</li> <li>Use the following command to install EJS using npm (Node Package Manager) in the console. This will create a \"package.json\" and \"package-lock.json\" file in the project directory.    <pre><code>npm init\n</code></pre></li> <li>You can accept the default values for most of the prompts, or customize them as needed.</li> </ol> <p> </p> </li> <li> <p>Install Express module. </p> <ol> <li>Enter the following command in the terminal. </li> <li>This will install Express as a dependency for your project.   <pre><code>npm install express\n</code></pre></li> </ol> </li> <li>Install EJS module. <ol> <li>Enter the following command in the terminal. </li> <li>This will install EJS as a dependency for your project.   <pre><code>npm install ejs \n</code></pre></li> </ol> </li> <li>Create a new file in you project directory named \"app.js\". <ol> <li>This will serve as the main entry point for your application. </li> </ol> </li> <li>Open \"app.js\" in your Visual Code Studio. </li> <li>Require the \"express\" module by adding the following line to the top of your \"app.js\".       <pre><code>const express = require(`express`);\n</code></pre></li> <li>Create an instance of the Express application by adding the following line in your \"app.js\".       <pre><code>const app = exprees();\n</code></pre></li> <li>Set the view engine to EJS by adding the following line in your \"app.js\".       <pre><code>app.set(`view engine`,  `ejs`);\n</code></pre></li> <li>Create a route for your application by adding the following lines: <ol> <li>This route will render a file named \"index.ejs\" located in the \"views\" directory. Now let's create this file!   <pre><code>app.get('/', (req, res) =&gt; {\nres.render('index');\n});\n</code></pre></li> </ol> </li> <li>Create a \"views\" directory in your project directory. </li> <li>Creae a new file in the \"views\" directory named \"index.ejs\".</li> </ol> Suceess <p>Now you are ready to explore the dynamics of EJS!</p>"},{"location":"task1/#ejs-tags","title":"EJS Tags","text":"Tag Description <code>&lt;%</code> Scriptlet' tag, for control-flow, no output <code>&lt;%_</code> Whitespace Slurping' Scriptlet tag, strips all whitespace before it <code>&lt;%=</code> Outputs the value into the template (escaped) <code>&lt;%-</code> Outputs the unescaped value into the template <code>&lt;%#</code> Comment tag, no execution, no output <code>&lt;%%</code> Outputs a literal '&lt;%' <code>%%&gt;</code> Outputs a literal '%&gt;' <code>%&gt;</code> Plain ending tag <code>-%&gt;</code> Trim-mode ('newline slurp') tag, trims following newline <code>_%&gt;</code> Whitespace Slurping' ending tag, removes all whitespace after it Info <p>It is recommended that you familiarize yourself with these tags before starting to use EJS.</p>"},{"location":"task2/","title":"Creating a basic EJS templates","text":"Recap <p>If you're building a web application with Node.js and Express, EJS (Embedded JavaScript) is a powerful templating engine that you can use to generate HTML markup dynamically.</p>"},{"location":"task2/#what-is-cli","title":"What is CLI?","text":"<p>CLI is a command line program that accepts text input to execute operating system functions. CLI stands for \"Command Line Interface\".</p> Species Description <code>-o / --output-file FILE</code> Write the rendered output to FILE rather than stdout. <code>-f / --data-file FILE</code> Must be JSON-formatted. Use parsed input from FILE as data for rendering. <code>-i / --data-input STRING</code> Must be JSON-formatted and URI-encoded. Use parsed input from STRING as data for rendering. <code>-m / --delimiter CHARACTER</code> Use CHARACTER with angle brackets for open/close (defaults to %). <code>-p / --open-delimiter CHARACTER</code> Use CHARACTER instead of left angle bracket to open. <code>-c / --close-delimiter CHARACTER</code> Use CHARACTER instead of right angle bracket to close. <code>-s / --strict</code> When set to true, generated function is in strict mode. <code>-n / --no-with</code> Use 'locals' object for vars rather than using with (implies --strict). <code>-l / --locals-name</code> Name to use for the object storing local variables when not using with. <code>-w / --rm-whitespace</code> Remove all safe-to-remove whitespace, including leading and trailing whitespace. <code>-d / --debug</code> Outputs generated function body. <code>-h / --help</code> Display this help message. <code>-V/v / --version</code> Display the EJS version."},{"location":"task2/#create-a-basic-ejs-template","title":"Create a basic EJS template","text":"<ol> <li>Create a a new folder called \"views\".</li> <li>Inside of your \"views\" folder, create a new file in your project directory called index.ejs.</li> </ol> <p>This file will contain your EJS template. Here's an example of a simple EJS template:</p> <pre><code>  &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= heading %&gt;&lt;/h1&gt;\n    &lt;p&gt;&lt;%= message %&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this template, there will be three EJS expressions:</p> <ul> <li>&lt;%= title %&gt; will display the value of the title variable.</li> <li>&lt;%= heading %&gt; will display the value of the heading variable.</li> <li>&lt;%= message %&gt; will display the value of the message variable.</li> </ul> Success <p>You have created a basic EJS template. You can now use this template to generate HTML markup with plain JavaScript.</p>"},{"location":"task2/#create-data-to-pass-to-the-template","title":"Create Data to Pass to the Template","text":"<p>One of the main benefits of using a templating language like EJS is the ability to pass data to the template.</p> <p>In order to display dynamic content on the web page, we need to pass data to the EJS template. To do this, create a new file in your project folder called data.js. This file will contain the data that we want to display on our web page.</p> <p>Create an object with the data that you want to dynamically display in your HTML file. For example, let's create an object with a title, heading, and message.</p> <pre><code>const data = {\ntitle: \"EJS Guide\",\nheading: \"Welcome to EJS Guide Website!\",\nmessage: \"This is a sample EJS template.\",\n};\nmodule.exports = data;\n</code></pre>"},{"location":"task2/#set-up-your-express-app","title":"Set up your Express app","text":"<p>Create a new file in your project folder called app.js. This file will contain the code to set up your Express.js app.</p> <pre><code>const express = require(\"express\");\nconst app = express();\nconst data = require(\"./data\");\napp.set(\"view engine\", \"ejs\");\napp.get(\"/\", (req, res) =&gt; {\nres.render(\"index\", data);\n});\napp.listen(3000, () =&gt; {\nconsole.log(\"Server started on port 3000\");\n});\n</code></pre> <p>In this code, we:</p> <ul> <li>Require the express module and create a new instance of an express app.</li> <li>Require the data from our data.js file.</li> <li>Set the view engine to EJS.</li> <li>Create a new route that renders our index.ejs file and passes in the data from data.js.</li> <li>Start the server on port 3000 and log a message to the console.</li> </ul>"},{"location":"task2/#start-the-server","title":"Start the server","text":"<p>In the terminal, run the following command to start the server:</p> <pre><code>node app.js\n</code></pre> Success <p>Now, visit \"http://localhost:3000\"</p>"},{"location":"task2/#outcome","title":"Outcome","text":""},{"location":"task3/","title":"Conditional statements in EJS templates","text":""},{"location":"task3/#if-statement","title":"If statement","text":"<p>Exapmle:</p> <pre><code>&lt;% if (loggedIn) { %&gt;\n&lt;p&gt;Welcome back, &lt;%= username %&gt;!&lt;/p&gt;\n</code></pre> Abstract <p>In this case, if loggedIn is truthy, the EJS template will display a welcome message that includes the username variable interpolated using the &lt;%= %&gt; syntax. If loggedIn is falsy, the message won't be displayed.</p>"},{"location":"task3/#else-statement","title":"Else statement","text":"<pre><code>&lt;% if (user.isAdmin) { %&gt;\n&lt;p&gt;Welcome, administrator.&lt;/p&gt;\n&lt;% } else { %&gt;\n&lt;p&gt;Welcome, user.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre> Abstract <p>In this example, if the user object has an isAdmin property with a value of true, the template will display a message welcoming the administrator. Otherwise, it will display a message welcoming the user. The else statement provides a fallback option for when the if condition is not met.</p>"},{"location":"task3/#else-if-statement","title":"Else-if statement","text":"<p>Example:</p> <pre><code>&lt;% if (score &gt;= 90) { %&gt;\n&lt;p&gt;You got an A!&lt;/p&gt;\n&lt;% } else if (score &gt;= 80) { %&gt;\n&lt;p&gt;You got a B.&lt;/p&gt;\n&lt;% } else if (score &gt;= 70) { %&gt;\n&lt;p&gt;You got a C.&lt;/p&gt;\n&lt;% } else { %&gt;\n&lt;p&gt;You need to study harder.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre> Abstract <p>the EJS template will display a different message depending on the value of the score variable. If score is greater than or equal to 90, the template will display a message indicating an A grade. If score is greater than or equal to 80, it will display a message indicating a B grade, and so on. If none of the conditions are met, it will display a message indicating that the user needs to study harder.</p> Quote <p>Overall, conditional statements in EJS allow you to create dynamic content that adapts to the state of your application, providing a more personalized experience for your users.</p> Success <p>Great work! You have learned how to use conditional statements in EJS templates to display different content based on conditions.</p>"}]}